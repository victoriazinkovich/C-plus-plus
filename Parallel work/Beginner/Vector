#include <algorithm>
#include <iostream>
#include <iterator>
#include <chrono>
#include <numeric>
#include <thread>
#include <future>
#include <vector>


class Timer
{
public:
    using clock_t = std::chrono::steady_clock;
    using time_point_t = clock_t::time_point;
    Timer() : m_begin(clock_t::now()), m_gap(0) {}

    ~Timer()
    {
        auto end = clock_t::now();
        std::cout << "Time, ms: " << std::chrono::duration_cast <std::chrono::microseconds> (end - m_begin).count() + m_gap << std::endl;
    }

private:
    time_point_t m_begin;
    long long m_gap;


public:
    void pause()
    {
        auto end = clock_t::now();
        auto gap = std::chrono::duration_cast <std::chrono::microseconds> (end - m_begin).count();
        m_gap += gap;
    }

    void play()
    {
        m_begin = clock_t::now();
    }
};


template < typename Iterator, class Functor >
struct for_each_block
{
    void operator()(Iterator begin, Iterator end, Functor function)
    {
        std::for_each(begin, end, function);
    }
};


template < typename T, typename Iterator, class Functor >
T parallel_for_each(Iterator first, Iterator end, Functor function, T num_threads)
{
    const std::size_t length = std::distance(first, end);
    const std::size_t block_size = length / num_threads;
    
    std::vector < std::thread > threads(num_threads);
    
    Iterator block_start = first;
    
    for (auto i = 0; i < num_threads; ++i)
        {
            Iterator block_end = block_start;
            
            std::advance(block_end, block_size);

            threads[i] = std::thread(
                for_each_block < Iterator, Functor > (),
                block_start, block_end, std::ref(function));

            block_start = block_end;
        }
    
    for_each_block < Iterator, Functor > ()(block_start, end, function);
    
    std::for_each(threads.begin(), threads.end(),
            std::mem_fn(&std::thread::join));
    
    return 0;
}


int main()
{
    std::vector < int > v(500);
    std::iota(std::begin(v), std::end(v), 0);
    
    std::cout << "Vector before:" << std::endl;
    
    for (auto &element : v)
    {
        std::cout << element << " ";
    }
    std::cout << '\n' << '\n';
    
    auto num_threads = 0;
    std::cout << "Number of threads is: ";
    std::cin >> num_threads;
    
    std::cout << '\n';
    std::cout << "Vector after:" << std::endl;
    
    Timer t;
    {
        parallel_for_each(std::begin(v), std::end(v), [](auto &element){element = -element;}, num_threads);
    }
    
    for (auto & element: v)
    {
        std::cout << element << " ";
    }
    std::cout << '\n';
    
    system("pause");
    return EXIT_SUCCESS;
}
