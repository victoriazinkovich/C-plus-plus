#include <algorithm>
#include <chrono>
#include <iostream>
#include <iterator>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>
#include <thread>
#include <utility>


class Timer
{
public:
    using clock_t = std::chrono::steady_clock;
    using time_point_t = clock_t::time_point;
    Timer() : m_begin(clock_t::now()), m_gap(0) {}

    ~Timer()
    {
        auto end = clock_t::now();
        std::cout << "micro: " << std::chrono::duration_cast <std::chrono::microseconds> (end - m_begin).count() + m_gap << std::endl;
    }

private:
    time_point_t m_begin;
    long long m_gap;


public:
    void pause()
    {
        auto end = clock_t::now();
        auto gap = std::chrono::duration_cast <std::chrono::microseconds> (end - m_begin).count();
        m_gap += gap;
    }

    void play()
    {
        m_begin = clock_t::now();
    }
};


template < typename Iterator, typename T >
struct count_round_block
{
    void operator()(Iterator first, Iterator last, T & result)
    {
        result = std::count_if(first, last, [](auto element){
            return (std::pow(std::abs(element.first - 0.05), 2) + std::pow(std::abs(element.second - 0.05), 2) <= std::pow(0.05, 2));
        });
    }
};


template < typename Iterator, typename T >
T count_round(Iterator first, Iterator last, T init, int flag)
{
    if (flag == 1)
    {
        int result = 0;
        count_round_block < Iterator, T > () (first, last, result);
        return result;
    }
    
    const std::size_t length = std::distance(first, last);

    const std::size_t num_threads = 8;
    const std::size_t block_size = length / num_threads;

    std::vector < int > results(num_threads);
    std::vector < std::thread > threads(num_threads - 1);

    Iterator block_start = first;

    for (std::size_t i = 0; i < (num_threads - 1); ++i)
    {
        auto block_end = block_start;
        std::advance(block_end, block_size);

        threads[i] = std::thread(count_round_block < Iterator, T > (),
            block_start, block_end, std::ref(results[i]));

        block_start = block_end;
    }

    count_round_block < Iterator, T > ()(block_start, last, results[num_threads - 1]);
    
    std::for_each(threads.begin(), threads.end(),
        [](auto & thread) {thread.join(); });

    return std::accumulate(results.begin(), results.end(), 0);
}


int main()
{
    std::mt19937 mt;
    std::uniform_real_distribution <> uid(0, 0.1);
    auto N = 1'000'000;

    std::vector < std::pair < double, double > > coordinats(N, std::make_pair(0, 0));
    std::generate_n(std::begin(coordinats), N, [&mt, &uid]() {return std::make_pair(uid(mt), uid(mt)); });

    unsigned long int M = 0;

    {
        std::cout << "Sequential work..." << std::endl;

        Timer t;
        
        M = count_round(std::begin(coordinats), std::end(coordinats), 0, 1);
        double pi = 4.0 * M / N;
        
        std::cout << "pi: " << pi << std::endl;
    }

    std::cout << '\n';
    
    {
        std::cout << "Parallel work..." << std::endl;

        Timer t;

        M = count_round(std::begin(coordinats), std::end(coordinats), 0, 0);
        double pi = 4.0 * M / N;
        
        std::cout << "pi: " << pi << std::endl;
    }
}
